blueprint:
  name: Lux Motion Lights
  description: Turn on lights when motion and Lux is below a certain amount.
  domain: automation
  author: Dan Clayton

  input:
    light_target:
      name: Lights
      selector:
        target:
          entity:
            domain:
              - light
              - switch
    motion_entity:
      name: Motion Sensor
      selector:
        entity:
          domain:
            - binary_sensor
          device_class: motion
    duration:
      name: Motion Duration
      selector:
        duration:
      default:
        hours: 0
        minutes: 20
        seconds: 0
    starttime:
      name: Motion Start time
      selector:
        time:
      default: "06:00:00"
    endtime:
      name: Motion End time
      selector:
        time:
      default: "21:30:00"
    brightness_entity:
      name: Lux/Brightness Sensor
      selector:
        entity:
          device_class: illuminance
    brightness:
      name: Maximum brightness
      description: Brightness trigger level. If it gets any brighter the lights will not be turned on.
      default: 20000
      selector:
        number:
          min: 0
          max: 80000
          unit_of_measurement: lux

trigger:
  - platform: state
    entity_id:
      - !input motion_entity
    from: "off"
    to: "on"

# making the input variable usable in the condition
variables:
  lights: !input "light_target"

condition:
  - condition: and
    conditions:
      - condition: time
        after: !input starttime
        before: !input endtime
      - condition: or
        conditions:
          - "{{ expand(lights.entity_id) | selectattr('state', '==', 'on') | list | count > 0 }}" # some lights in the group are on
          - condition: numeric_state
            entity_id: !input brightness_entity
            below: !input brightness

mode: restart
max_exceeded: silent

action:
  - service: light.turn_on
    target: !input light_target
  - wait_for_trigger:
      platform: state
      entity_id: !input motion_entity
      from: "on"
      to: "off"
  - delay: !input duration
  - service: light.turn_off
    target: !input light_target
